//
// Copyright(C) Web Technology Corp.
//
// SpriteStudio6 Player for UE4 
//   オフスクリーンレンダリング用シェーダ 
//

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/GammaCorrectionCommon.ush"

Texture2D CellTexture;
SamplerState CellTextureSampler;
Texture2D MaskTexture;
SamplerState MaskTextureSampler;

struct VertexOut
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR0;
	float2 TexCoord : TEXCOORD0;
	float2 ColorBlend : TEXCOORD1;	// [0]:ColorBlendType, [1]:ColorBlendRate
};
struct VertexOutMasked
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR0;
	float2 TexCoord : TEXCOORD0;
	float2 ColorBlend : TEXCOORD1;	// [0]:ColorBlendType, [1]:ColorBlendRate
	float2 MaskCoord : TEXCOORD2;
};

VertexOut MainVS(
	in float2 InPosition : ATTRIBUTE0,
	in float4 InColor : ATTRIBUTE1,
	in float2 InTexCoord : ATTRIBUTE2,
	in float2 InColorBlend : ATTRIBUTE3
	)
{
	VertexOut VOut;
	VOut.Position = float4(InPosition.xy, 0, 1);
	VOut.TexCoord = InTexCoord.xy;
	VOut.Color = InColor;
	VOut.ColorBlend = InColorBlend;
	return VOut;
}
VertexOutMasked MainMaskedVS(
	in float2 InPosition : ATTRIBUTE0,
	in float4 InColor : ATTRIBUTE1,
	in float2 InTexCoord : ATTRIBUTE2,
	in float2 InColorBlend : ATTRIBUTE3
	)
{
	VertexOutMasked VOut;
	VOut.Position = float4(InPosition.xy, 0, 1);
	VOut.TexCoord = InTexCoord.xy;
	VOut.Color = InColor;
	VOut.ColorBlend = InColorBlend;
	VOut.MaskCoord.x =       (InPosition.x + 1.0) / 2.0;
	VOut.MaskCoord.y = 1.0 - (InPosition.y + 1.0) / 2.0;
	return VOut;
}

float4 CalcColorPS(float4 InColor, float2 InTexCoord, float2 InColorBlend)
{
	float4 TextureColor = Texture2DSample(CellTexture, CellTextureSampler, InTexCoord);
	float ColorBlendRate = InColorBlend.y;
	uint ColorBlendType = uint(InColorBlend.x);

	TextureColor.rgb = LinearToSrgbBranchless(TextureColor.rgb);

	float4 OutColor;
	     if(0 == ColorBlendType){ OutColor = (TextureColor * (1.0 - ColorBlendRate)) + (InColor * ColorBlendRate); }				// Mix
	else if(1 == ColorBlendType){ OutColor = (TextureColor * (1.0 - ColorBlendRate)) + (TextureColor * InColor * ColorBlendRate); }	// Mul
	else if(2 == ColorBlendType){ OutColor = TextureColor + (InColor * ColorBlendRate); }											// Add
	else if(3 == ColorBlendType){ OutColor = TextureColor - (InColor * ColorBlendRate); }											// Sub
	else if(4 == ColorBlendType){ OutColor = TextureColor; }																		// Invalid
	else if(5 == ColorBlendType){ OutColor = (TextureColor * (1.0 - ColorBlendRate)) + (TextureColor * InColor * ColorBlendRate); }	// Effect

	OutColor.a = TextureColor.a * InColor.a;

	return OutColor;
}
float4 MainPS(VertexOut In) : SV_Target0
{
	return CalcColorPS(In.Color, In.TexCoord, In.ColorBlend);
}
float4 MainMaskedPS(VertexOutMasked In) : SV_Target0
{
	float4 Color = CalcColorPS(In.Color, In.TexCoord, In.ColorBlend);

	// 0〜255の整数値に直して奇数値であればマスク対象 
#if COMPILER_METAL
	float MaskCheck = Texture2DSample(MaskTexture, MaskTextureSampler, In.MaskCoord).r * 255.0 / 2.0;
	int Mask = 1 - round((MaskCheck - floor(MaskCheck) + 0.1));
#else
	int Mask = (1 + int(Texture2DSample(MaskTexture, MaskTextureSampler, In.MaskCoord).r * 255)) & 0x01;
#endif

	return float4(Color.rgb, Color.a * (float)Mask);
}
